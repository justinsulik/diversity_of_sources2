<!DOCTYPE html>
<html>
    <head>
        <title>Experiment</title>
        <script language="javascript" src="libraries/p5.min.js"></script>
        <script language="javascript" src="libraries/p5.dom.min.js"></script>
        <script language="javascript" src="libraries/d3.min.js"></script>
        <script language="javascript" src="libraries/lodash.min.js"></script>
        <script language="javascript" src="libraries/jquery-3.4.1.min.js"></script>
        <script language="javascript" src="jspsych/jspsych.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-external-html.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-2afc-p5.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-instructions.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-survey-text.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-survey-likert-customized.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-survey-multi-choice.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-demographics.js"></script>
        <link href="jspsych/css/jspsych.css" rel="stylesheet" type="text/css"></link>
        <link href="css/experiment.css" rel="stylesheet" type="text/css"></link>
    </head>
    <body>
    </body>
    <script>

/*
Set up study variables
*/
    // following syntax accepts data from app.js
    var input_data = <%- input_data %>

    var trial_id = input_data.trial_id
    var cmpltnCd = makeCode(3)+'RtR' + makeCode(5) + '4z4'
    jsPsych.data.addProperties({cmpltnCd: cmpltnCd,
                                trial_id: trial_id});

    var data = {};
    var timeline = [];
    var experiment_start_time;
    var save_attempts = 0;
    var saveTimeout = 1000;
    var cmpltnCdEnd;
    var dataUrl = '/data?trial_id=' + trial_id;

    // specify RGB colors for TV backgrounds
    var tv_backgrounds =  {
      // 5 contrasts
      5: [[[240, 25, 75], [245, 150, 60], [60, 180, 75], [0, 130, 200], [145, 30, 180]],
      [[215, 0, 30],[255, 225, 25],[210, 245, 60],[70, 240, 240],[245, 70, 245]],
      [[255, 170, 150],[250, 250, 170],[170, 250, 170],[170, 170, 250],[250, 170, 240]]],
      // 4 contrasts
      4: [[[255, 225, 25],[210, 245, 60],[70, 240, 240],[240, 50, 230]],
      [[245, 130, 48],[60, 180, 75],[0, 130, 200],[145, 30, 180]]],
      // 3 contrasts
      3: [[[150, 0, 0],[0, 150, 0],[0, 0, 150]]]
    }
    var tv_background_counter = {5: 0, 4: 0, 3: 0};
    var practice_backgrounds = [[255, 170, 150],[170, 250, 170],[170, 170, 250],[250, 170, 240]];

    var attn_checks = {
      0: {
        tv_background: [[247, 171, 40], [41, 59, 255]],
        preamble: 'Choose the side with <b>more orange</b> backgrounds.',
        correct: 'less diverse'
      },
      1: {
        tv_background: [[41, 59, 255], [247, 171, 40]],
        preamble: 'Choose the side with <b>fewer blue</b> backgrounds.',
        correct: 'more diverse'
      }
    }

    // colors for skin/shirts
    var skin_colors = [
      [255, 229, 200],
      [255, 218, 190],
      [255, 206, 180],
      [240, 184, 160],
      [225, 172, 150],
      [210, 161, 140],
      [180, 138, 120],
      [150, 115, 100],
      [120, 92, 80],
      [90, 69, 60],
    ]
    // #https://sashat.me/2017/01/11/list-of-20-simple-distinct-colors/
    var shirt_colors = [
      [230, 25, 75],
      [60, 180, 75],
      [225, 225, 25],
      [67, 99, 216],
      [245, 130, 49],
      [145, 30, 180],
      [70, 240, 240],
      [240, 50, 230],
      [188, 246, 12],
      [250, 190, 190],
      [0, 128, 128],
      [230,190, 255],
      [154, 99, 36],
      [255, 250, 200],
      [128, 0, 0],
      [170, 255, 195],
      [128, 128, 0],
      [255, 216, 177],
      [0, 0, 117],
      [128, 128, 128],
      [255, 255, 255],
      [0, 0, 0]];

      // town names
      var town_names = [
        'Franklin',
        'Chester',
        'Greenville',
        'Springfield',
        'Fairfield',
        'Riverside',
        'Kingston',
        'Marion',
        'Georgetown',
        'Middleton',
        'Centerville'];

      var town_names_shuffled = jsPsych.randomization.shuffle(town_names);

/*
Sources trial data
*/
    // generate tv channel IDs
    var tv_factors = {
      gender: ['male', 'female'],
      channel: _.range(10)};
    var tv_channels_all = _.map(jsPsych.randomization.factorial(tv_factors, 1), function(obj){
      return obj.gender+obj.channel
    });

    // contrasts for each trial, grouped by difference in number of channels
    var contrasts = {
      2: [[5, 3], [4, 2], [3, 1]],
      3: [[5, 2], [4, 1]],
      4: [[5, 1]]
    };

    // Set batch order (so contrasts can be presented in either increasing or decreasing difficulty)
    var batch_order;
    if(Math.random()<0.5){
      console.log('Condition: decreasing difficulty')
      batch_order = [2, 3, 4];
      jsPsych.data.addProperties({difficulty: 'decreasing'});
    } else {
      console.log('Condition: increasing difficulty')
      batch_order = [4, 3, 2];
      jsPsych.data.addProperties({difficulty: 'increasing'});
    }
    // Set up trial timeline in line with above batch order
    var contrasts_timeline = [];
    batch_order.forEach(function(contrast, j){
      var trials = contrasts[contrast]
      // shuffle trials within each batch
      var trials_shuffled = jsPsych.randomization.shuffle(trials);
      trials_shuffled.forEach(function(trial, i){
        // of the two choices, find the largest number
        var max_channels = _.max(trial);
        // sample that many channels and background colors
        var channels_sample = jsPsych.randomization.sampleWithoutReplacement(tv_channels_all, max_channels);
        // use tv_background_counter to find the next unused set of background colors
        var tv_backgrounds_index = tv_background_counter[max_channels];
        var tv_background = tv_backgrounds[max_channels][tv_backgrounds_index];
        tv_background_counter[max_channels] += 1;
        contrasts_timeline.push({
          contrasts: trial,
          tv_background: tv_background,
          tv_channels: channels_sample,
          town_name: town_names_shuffled[contrasts_timeline.length+1]
        })
      })
      // after each of the first two batches, add an attention check
      if(j<2){
        contrasts_timeline.push({
          contrasts: [1, 2],
          tv_background: attn_checks[j].tv_background,
          tv_channels: jsPsych.randomization.sampleWithoutReplacement(tv_channels_all, 2),
          preamble: attn_checks[j].preamble,
          data: {
            attn_check: true,
            correct_answer: attn_checks[j].correct
          }
        })
      }
    })


/*
Define trials
*/
    // consent

    var consent = {
      type: 'external-html',
      url: '../views/consent.html',
      check_fn: function(){
        experiment_start_time = Date.now();
        return true;
      },
      cont_btn: 'consent'
    }

    // english instructions

    var english_instructions = {
      type: 'instructions',
      pages: ['In this study, you will be doing two main tasks. In the first task, you\'ll be rating sentences according to whether they are good English or not.<br><br>' +
      'For each sentence, just click "yes" if you think it is good English and "no" if you think it is not.'],
      show_clickable_nav: true,
    }

    var english_options = ['no', 'yes'];
    var questions_eng = [{name: 0, prompt: "Athletes often need to warm up.", options: english_options, horizontal: true, required: true},
      {name: 1, prompt: "I just saw a moose running down the road!", options: english_options, horizontal: true, required: true},
      {name: 2, prompt: "John ill felt and went doctor.", options: english_options, horizontal: true, required: true},
      {name: 3, prompt: "Could you the books put in that boxes?", options: english_options, horizontal: true, required: true},
      {name: 4, prompt: "I am forget do my homeworks.", options: english_options, horizontal: true, required: true},
      {name: 5, prompt: "She think English is more easier to learn.", options: english_options, horizontal: true, required: true},
      {name: 6, prompt: "Tommorow will be thatier than today.", options: english_options, horizontal: true, required: true},
      {name: 7, prompt: "The building is very murnley.", options: english_options, horizontal: true, required: true},
      {name: 8, prompt: "Where is the pen that I gave it to you yesterday?", options: english_options, horizontal: true, required: true},
      {name: 9, prompt: "He was pulled over by the police for driving 120 miles per hour.", options: english_options, horizontal: true, required: true},
    ]
    questions_eng_shuffled = jsPsych.randomization.repeat(questions_eng, 1);

    var english = {
      type: 'survey-multi-choice',
      questions: questions_eng_shuffled,
      preamble: 'Are the following sentences good English ("yes") or not ("no")?',
      data: {block: 'english'}
    };

    // sources instructions

    var sources_instructions = {
      type: 'instructions',
      pages: ['In the second task, imagine that you are working for your state government. '+
      'Your job is to travel around to various small towns in your state and interview people on a range of topics, '+
      'including their beliefs about how the state government is performing. '+
      'The people in these particular towns mostly get their information about such matters from local TV news channels.<br><br>'+
      'You wouldn\'t have enough time to interview everybody, so you\'ll have to be selective '+
      'and interview just 5 people per town, '+
      'but you want to make sure you get an accurate idea of what the town in general believes.<br><br>'+
      'For each trial, we will show you two groups of five townspeople, along with their preferred news channels. '+
      'Your task is to decide which of these two groups you would trust more '+
      'to give you an accurate reflection of the town\'s attitudes and beliefs, in general.',
      'We are using fictitious town names, and are using cartoons to represent the townspeople and the TV news channels. '+
      'Don\'t worry too much about trying to differentiate people and channels based on subtle differences. '+
      'If they look even slightly different, then they are different! This will be most evident in the colors we are using.<br><br>'+
      'First, you will do a practice trial.'],
      show_clickable_nav: true
    }

    // sources practice trial
    var sources_practice = {
      type: '2afc-p5',
      contrasts: [4, 3],
      skin_colors: jsPsych.randomization.sampleWithoutReplacement(skin_colors, 5),
      shirt_colors: jsPsych.randomization.sampleWithoutReplacement(shirt_colors, 10),
      tv_background: practice_backgrounds,
      tv_channels: jsPsych.randomization.sampleWithoutReplacement(tv_channels_all, 4),
      town_name: town_names_shuffled[0],
      data: {practice: true}
    };

    var sources_instructions2 = {
      type: 'instructions',
      pages: ['Some of the trials will be <b>attention checks</b>, where we will ask you to choose a specific group, '+
      'to show that you are reading carefully. '+
      'If you fail more than one attention check, we will not be able to use your data.',
      'Next you will do the trials. There will be 8 of them.'],
      show_clickable_nav: true
    }

    // main trials

    var sources_trial = {
      type: '2afc-p5',
      skin_colors: jsPsych.randomization.sampleWithoutReplacement(skin_colors, 5),
      shirt_colors: jsPsych.randomization.sampleWithoutReplacement(shirt_colors, 10),
      data: {practice: false},
      timeline: contrasts_timeline,
    }

    // feedback

    var feedback_text = {
      type: 'survey-text',
      questions: [{name: 'strategy_text',
        prompt: 'How did you make your decisions in this task? What factors did you consider?',
        required: true,
        rows: 8,
        columns: 80
      }]
    }

    var importance_labels = ['Not at all important',
                             'Slightly important',
                             'Moderately important',
                             'Quite important',
                             'Extremely important']

    var feedback_questions = [
     {name: 'appearance',
      prompt: '<b>Their appearance (e.g., hair or clothes)</b>',
      required: true,
      labels: importance_labels},
     {name: 'demo',
      prompt: '<b>Their demographics (e.g., gender or ethnicity)</b>',
      required: true,
      labels: importance_labels},
     {name: 'sources',
      prompt: '<b>Their sources of information (e.g., TV channel)</b>',
      required: true,
      labels: importance_labels}]

    var feedback_questions_shuffled = jsPsych.randomization.shuffle(feedback_questions);

    var feedback_likert = {
      type: 'survey-likert',
      questions: feedback_questions_shuffled,
      preamble: 'How important do you think each factor is for deciding which group to interview ' +
      'to gain an accurate idea of what the town in general believes.'
    }

    // bio

    var demographics = {
      type: 'demographics'
    }



    // fill timeline

    // timeline.push(consent);
    // timeline.push(english_instructions);
    // timeline.push(english);
    // timeline.push(sources_instructions);
    // timeline.push(sources_practice);
    timeline.push(sources_instructions2);
    timeline.push(sources_trial);
    timeline.push(feedback_text);
    timeline.push(feedback_likert);
    timeline.push(demographics);

    jsPsych.init({
        default_iti: 500,
        show_progress_bar: true,
        exclusions: {
          min_width: 800,
          min_height: 500
        },
        timeline: timeline,
        on_finish: function(){
          save();
        }
    });

    function save(){
      if(save_attempts==0){
        var experiment_end_time = Date.now();
        var duration = experiment_end_time - experiment_start_time;
        var interactionData = jsPsych.data.getInteractionData().json();
        jsPsych.data.get().addToLast({duration: duration,
                                      interactionData: interactionData,
                                    });
        data.responses = jsPsych.data.get().json();
        data.trial_id = trial_id;
        data.cmpltnCd = cmpltnCd;
        cmpltnCdEnd = cmpltnCd + trial_id;
        console.log('    About to post survey output data...', data);
      }
      dataJSON = JSON.stringify(data);

      $.ajax({
         type: 'POST',
         url: dataUrl,
         data: dataJSON,
         contentType: "application/json",
         timeout: 3000,
         success: function(request, status, error){
           finish(cmpltnCdEnd+'_'+save_attempts)
         },
         error: function(request, status){
           $('#jspsych-content').html("Please wait a few seconds while we save your responses...")
           console.log('    Error posting data...', request, status)
           if ( save_attempts < 5) {
             save_attempts += 1;
             saveTimeout += 500;
             console.log("Trying again, attempt ", save_attempts)
             setTimeout(function () {
                save();
                }, saveTimeout)
           } else {
             finish(cmpltnCdEnd+'_'+save_attempts);
           }
         }
       });
    }

    function finish(cmpltnCd){
      if(trial_id=='test'){
        window.location.href = '/finish_demo'
      } else {
        window.location.href = "/finish?token="+cmpltnCd;
      }

    }

    function makeCode(len){
      var text = "";
      var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYabcdefghijklmnopqrstuvwxy0123456789";
      for( var i=0; i < len; i++ ){
        text += possible.charAt(Math.floor(Math.random() * possible.length));
      }
      return text;
    };

    </script>
</html>
